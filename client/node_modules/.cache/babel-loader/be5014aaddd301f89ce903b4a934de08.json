{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const GetUsersDocument = gql`\n    query GetUsers {\n  getAllUsers {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useGetUsersQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(GetUsersDocument, baseOptions);\n}\nexport function useGetUsersLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(GetUsersDocument, baseOptions);\n}","map":{"version":3,"sources":["/home/zied/project/js/slack-clone/client/src/generated/graphql.tsx"],"names":["gql","ApolloReactHooks","GetUsersDocument","useGetUsersQuery","baseOptions","useQuery","useGetUsersLazyQuery","useLazyQuery"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AA0GA,OAAO,MAAMC,gBAAgB,GAAGF,GAAI;;;;;;;KAA7B;AASP;;;;;;;;;;;;;;;;AAeA,OAAO,SAASG,gBAAT,CAA0BC,WAA1B,EAAkH;AACjH,SAAOH,gBAAgB,CAACI,QAAjB,CAAiEH,gBAAjE,EAAmFE,WAAnF,CAAP;AACD;AACP,OAAO,SAASE,oBAAT,CAA8BF,WAA9B,EAA0H;AACvH,SAAOH,gBAAgB,CAACM,YAAjB,CAAqEL,gBAArE,EAAuFE,WAAvF,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type Channel = {\n   __typename?: 'Channel',\n  id: Scalars['Int'],\n  name: Scalars['String'],\n  public: Scalars['Boolean'],\n  users: Array<User>,\n  messages: Array<Message>,\n  team: Team,\n};\n\nexport type Message = {\n   __typename?: 'Message',\n  id: Scalars['Int'],\n  text: Scalars['String'],\n  user: User,\n  channel: Channel,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  createUser: User,\n  createTeam: Scalars['Boolean'],\n  createChannel: Scalars['Boolean'],\n  createMessage: Scalars['Boolean'],\n};\n\n\nexport type MutationCreateUserArgs = {\n  password: Scalars['String'],\n  email: Scalars['String'],\n  username: Scalars['String']\n};\n\n\nexport type MutationCreateTeamArgs = {\n  name: Scalars['String'],\n  owner: Scalars['Float']\n};\n\n\nexport type MutationCreateChannelArgs = {\n  name: Scalars['String'],\n  public: Scalars['Boolean'],\n  teamId: Scalars['Float']\n};\n\n\nexport type MutationCreateMessageArgs = {\n  text: Scalars['String'],\n  channelId: Scalars['Float']\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  hi: Scalars['String'],\n  getUser: User,\n  getAllUsers: Array<User>,\n};\n\n\nexport type QueryGetUserArgs = {\n  id: Scalars['Float']\n};\n\nexport type Team = {\n   __typename?: 'Team',\n  id: Scalars['Int'],\n  user: User,\n  name: Scalars['String'],\n  channels: Array<Channel>,\n  users: Array<User>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['Int'],\n  username: Scalars['String'],\n  email: Scalars['String'],\n  messages: Array<Message>,\n  channels: Array<Channel>,\n  teams: Array<Team>,\n};\n\nexport type GetUsersQueryVariables = {};\n\n\nexport type GetUsersQuery = (\n  { __typename?: 'Query' }\n  & { getAllUsers: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\n\nexport const GetUsersDocument = gql`\n    query GetUsers {\n  getAllUsers {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = ApolloReactCommon.QueryResult<GetUsersQuery, GetUsersQueryVariables>;"]},"metadata":{},"sourceType":"module"}